/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.util.ArrayList;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JSplitPane;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.CityDir;

/**
 *
 * @author hrish
 */
public class CityAdminPanel extends javax.swing.JPanel {

    /**
     * Creates new form CityAdmin
     */
    
    private JSplitPane splitPane;
    private CityDir cityDir;
    private String cityName;
    private int population;
    private String cityType;
    
    
    public CityAdminPanel(CityDir cityDir, JSplitPane splitPane) {
        initComponents();
        
        this.cityDir = cityDir;
        this.splitPane = splitPane;
        
        ButtonGroup g1 = new ButtonGroup();
        
        g1.add(radioUrban);
        g1.add(radioRural);
        
        populateCitiesTable();
    }
    
    private void populateCitiesTable() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        
        // House Table        
        DefaultTableModel model = (DefaultTableModel) tblCities.getModel();
        model.setRowCount(0);
        
        if(cityDir.getCityDir() != null) {
        for(City c : cityDir.getCityDir()) {
            
            Object[] row = new Object[11];
            //row[0] = house;
            row[0] = c.getCityName();
            row[1] = c.getPopulation();
            row[2] = c.getCityType();
            
            model.addRow(row);
        }
        }
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCities = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtCityName = new javax.swing.JTextField();
        txtPopulation = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        radioUrban = new javax.swing.JRadioButton();
        radioRural = new javax.swing.JRadioButton();
        btnCreateCity = new javax.swing.JButton();
        updateCity = new javax.swing.JButton();
        btnDeleteCity = new javax.swing.JButton();

        tblCities.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "City Name", "Population", "Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCities);

        jLabel3.setText("City Name:");

        jLabel4.setText("City Population:");

        jLabel5.setText("City Type:");

        radioUrban.setText("Urban");
        radioUrban.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioUrbanActionPerformed(evt);
            }
        });

        radioRural.setText("Rural");

        btnCreateCity.setText("Create City");
        btnCreateCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateCityActionPerformed(evt);
            }
        });

        updateCity.setText("Update City");
        updateCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCityActionPerformed(evt);
            }
        });

        btnDeleteCity.setText("Delete City");
        btnDeleteCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCityActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPopulation, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCityName, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(radioUrban)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(radioRural))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCreateCity, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(updateCity, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(417, 417, 417))
            .addGroup(layout.createSequentialGroup()
                .addGap(315, 315, 315)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnDeleteCity, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(333, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(75, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDeleteCity)
                .addGap(65, 65, 65)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtCityName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtPopulation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(radioUrban)
                    .addComponent(radioRural))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreateCity)
                    .addComponent(updateCity))
                .addGap(68, 68, 68))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void radioUrbanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioUrbanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioUrbanActionPerformed

    private void btnCreateCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateCityActionPerformed
        // TODO add your handling code here:
        
        cityName = txtCityName.getText();
        population = Integer.parseInt(txtPopulation.getText());

        
        if(!cityName.matches("[a-zA-Z]+")) {
            JOptionPane.showMessageDialog(this, "Name should have only alphabets.");
            return;
        }
        
        if(cityName.length() == 0) {
            JOptionPane.showMessageDialog(this, "All fields are mandatory.");
            return;
        }
        
        //Radio buttons

        if(radioUrban.isSelected() == true) {
            cityType = "Urban";
        }
        else if(radioRural.isSelected() == true){
            cityType = "Rural";
        }
        else {
            JOptionPane.showMessageDialog(this, "Please select a city type.");
        }
        
        
        City c = cityDir.addNewCity();
        
        c.setCityName(cityName);
        c.setPopulation(population);
        c.setCityType(cityType);
        
        JOptionPane.showMessageDialog(this, "City created!");
        
        populateCitiesTable();
        
    }//GEN-LAST:event_btnCreateCityActionPerformed

    private void updateCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCityActionPerformed
        // TODO add your handling code here:
        
        cityName = txtCityName.getText();
        population = Integer.parseInt(txtPopulation.getText());
        
        if(!cityName.matches("[a-zA-Z]+")) {
            JOptionPane.showMessageDialog(this, "Name should have only alphabets.");
            return;
        }
        
        if(cityName.length() == 0) {
            JOptionPane.showMessageDialog(this, "All fields are mandatory.");
            return;
        }
        
        //Radio buttons

        if(radioUrban.isSelected() == true) {
            cityType = "Urban";
        }
        else if(radioRural.isSelected() == true){
            cityType = "Rural";
        }
        else {
            JOptionPane.showMessageDialog(this, "Please select a city type.");
        }
        
        int selectedRowIndex = tblCities.getSelectedRow();

        if (selectedRowIndex < 0 ) {

            JOptionPane.showMessageDialog(this, "Please select a city.");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblCities.getModel();
        String selectedCity = (String) model.getValueAt(selectedRowIndex, 0);
        
        ArrayList<City> cDir = cityDir.getCityDir();
        
        for(City c: cDir) {
            if(c.getCityName().equalsIgnoreCase(selectedCity)) {                
                c.setCityName(cityName);
                c.setCityType(cityType);
                c.setPopulation(population);                                        
            }
        }
        
        JOptionPane.showMessageDialog(this, "City updated!");
        
        populateCitiesTable();                
    }//GEN-LAST:event_updateCityActionPerformed

    private void btnDeleteCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCityActionPerformed
        // TODO add your handling code here:        
        int selectedRowIndexCity = tblCities.getSelectedRow();

        if (selectedRowIndexCity < 0 ) {

            JOptionPane.showMessageDialog(this, "Please select a city.");
            return;
        }

        DefaultTableModel model;
        model = (DefaultTableModel) tblCities.getModel();
        String cityName = (String) model.getValueAt(selectedRowIndexCity, 0);

        ArrayList<City> cDir = cityDir.getCityDir();

        for(City c: cDir) {
            if(c.getCityName().equalsIgnoreCase(cityName)) {
                
                cityDir.deleteCity(c);
                populateCitiesTable();
                JOptionPane.showMessageDialog(this, "City Deleted!");
                break;
            }
        }
    }//GEN-LAST:event_btnDeleteCityActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateCity;
    private javax.swing.JButton btnDeleteCity;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton radioRural;
    private javax.swing.JRadioButton radioUrban;
    private javax.swing.JTable tblCities;
    private javax.swing.JTextField txtCityName;
    private javax.swing.JTextField txtPopulation;
    private javax.swing.JButton updateCity;
    // End of variables declaration//GEN-END:variables
}
