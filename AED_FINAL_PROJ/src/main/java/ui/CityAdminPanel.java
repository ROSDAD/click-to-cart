/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import org.apache.commons.lang3.StringUtils;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JSplitPane;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.CityDir;
import model.Community;
import model.Company;
import model.CompanyDirectory;
import model.CustomerDirectory;
import model.DeliveryBoyDirectory;
import model.UserAuthenticationDirectory;
import org.apache.commons.lang3.StringUtils;

/**
 *
 * @author 91961
 */
public class CityAdminPanel extends javax.swing.JPanel {

    private CityDir cityDirectory;
    private JSplitPane splitPane;
    private CustomerDirectory customerDirectory;
    private CompanyDirectory companyDirectory;
    private Community community;
    private UserAuthenticationDirectory userauthenticationdirectory;
    private DeliveryBoyDirectory deliveryBoyDirectory;

    /**
     * Creates new form CompanyEntityAdminPanel
     */
    public CityAdminPanel() {
        initComponents();
    }

    public CityAdminPanel(CityDir cityDirectory, Community community, CustomerDirectory customerDirectory, CompanyDirectory companyDirectory, UserAuthenticationDirectory userauthenticationdirectory, JSplitPane splitPane, DeliveryBoyDirectory deliveryBoyDirectory) {
        initComponents();
        this.cityDirectory = cityDirectory;
        this.community = community;
        this.splitPane = splitPane;
        this.customerDirectory = customerDirectory;
        this.companyDirectory = companyDirectory;
        this.userauthenticationdirectory = userauthenticationdirectory;
        this.deliveryBoyDirectory = deliveryBoyDirectory;
    }

    /**
     * Populate the table cities rows from the arrayList.
     */
//    private void populateCities() {
//        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
//        model.setRowCount(0);
//        for (City city : cityDirectory.getCityDir()) {
//            Object[] row = new Object[1];
//            row[0] = city.getCityName();
//            model.addRow(row);
//        }
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        viewButton1 = new javax.swing.JButton();
        updateButton2 = new javax.swing.JButton();
        deleteButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        jTable5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Company Name", "Company Type", "Company Employee Count"
            }
        ));
        jTable5.setShowHorizontalLines(true);
        jTable5.setShowVerticalLines(true);
        jScrollPane1.setViewportView(jTable5);

        viewButton1.setText("View");
        viewButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButton1ActionPerformed(evt);
            }
        });

        updateButton2.setText("Update");
        updateButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButton2ActionPerformed(evt);
            }
        });

        deleteButton3.setText("Delete");
        deleteButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButton3ActionPerformed(evt);
            }
        });

        jButton1.setText("Create");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(238, 238, 238)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(100, 100, 100)
                        .addComponent(viewButton1)
                        .addGap(102, 102, 102)
                        .addComponent(updateButton2)
                        .addGap(109, 109, 109)
                        .addComponent(deleteButton3))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 779, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(281, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewButton1)
                    .addComponent(updateButton2)
                    .addComponent(deleteButton3)
                    .addComponent(jButton1))
                .addContainerGap(110, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void viewButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButton1ActionPerformed
        // TODO add your handling code here:

        //Selected City Table
        int selectedRowIndexCity = jTable1.getSelectedRow();
        if (selectedRowIndexCity < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to select city");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String selectedCityName = model.getValueAt(selectedRowIndexCity, 0).toString();

        for (City city : cityDirectory.getCityDir()) {
            if (city.getCityName().equalsIgnoreCase(selectedCityName)) {
                if (city.getCompanyDirectory() == null) {
                    List<Company> communityList = new ArrayList<>();
                    populateCompanies(communityList);
                } else {
                    populateCompanies(city.getCompanyDirectory().getCompanyDirectoryList());
                }
                break;
            }
        }
    }//GEN-LAST:event_viewButton1ActionPerformed

    /**
     * Populate the table rows from the arrayList.
     */
    private void populateCompanies(List<Company> companyList) {
        DefaultTableModel model = (DefaultTableModel) jTable5.getModel();
        model.setRowCount(0);
        for (Company company : companyList) {
            Object[] row = new Object[3];
            row[0] = company.getCompanyName();
            row[1] = company.getCompanyType();
            row[2] = company.getCompanyEmployeeCount();
            model.addRow(row);
        }
    }


    private void updateButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButton2ActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = jTable5.getSelectedRow();

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to update");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) jTable5.getModel();
        String selectedCompanyName = (String) model.getValueAt(selectedRowIndex, 0);

        String companyName = model.getValueAt(selectedRowIndex, 0).toString();
        String companyType = model.getValueAt(selectedRowIndex, 1).toString();
        long companyEmployeeCount = Long.parseLong(model.getValueAt(selectedRowIndex, 2).toString());
        String newCompanyName;
        while (true) {
            newCompanyName = JOptionPane.showInputDialog(null, "Enter the company name", companyName);
            if (StringUtils.isNotEmpty(newCompanyName)) {
                break;
            }
        }
        String newCompanyType;
        while (true) {
            newCompanyType = JOptionPane.showInputDialog(null, "Enter the company type", companyType);
            if (StringUtils.isNotEmpty(newCompanyType)) {
                break;
            }
        }
        String newCompanyEmployeeCount;
        while (true) {
            newCompanyEmployeeCount = JOptionPane.showInputDialog(null, "Enter the company employee count ", companyEmployeeCount);
            if (StringUtils.isNotEmpty(newCompanyEmployeeCount)) {
                break;
            }
        }

        model.setValueAt(newCompanyName, selectedRowIndex,0);
        model.setValueAt(newCompanyType, selectedRowIndex,1);
        model.setValueAt(newCompanyEmployeeCount, selectedRowIndex,2);

        //Selected City Table
        int selectedRowIndexCity = jTable1.getSelectedRow();
        if (selectedRowIndexCity
                < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to select city");
            return;
        }
        DefaultTableModel model1 = (DefaultTableModel) jTable1.getModel();
        String selectedCityName = model1.getValueAt(selectedRowIndexCity, 0).toString();

        for (City city
                : cityDirectory.getCityDir()) {
            if (city.getCityName().equalsIgnoreCase(selectedCityName)) {
                for (Company company : city.getCompanyDirectory().getCompanyDirectoryList()) {
                    if (company.getCompanyName().equalsIgnoreCase(selectedCompanyName)) {
                        company.setCompanyName(newCompanyName);
                        company.setCompanyType(newCompanyType);
                        company.setCompanyType(newCompanyEmployeeCount);
                        break;
                    }
                }
            }
        }

        JOptionPane.showMessageDialog(this,
                "Company Record is Updated");
    }//GEN-LAST:event_updateButton2ActionPerformed

    private void deleteButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButton3ActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = jTable5.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
            return;
        }
        //Selected City Table
        int selectedRowIndexCity = jTable1.getSelectedRow();
        if (selectedRowIndexCity < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to select city");
            return;
        }
        DefaultTableModel model1 = (DefaultTableModel) jTable1.getModel();
        String selectedCityName = model1.getValueAt(selectedRowIndexCity, 0).toString();

        DefaultTableModel model = (DefaultTableModel) jTable5.getModel();
        int rowToModel = 0;
        rowToModel = jTable5.convertRowIndexToModel(selectedRowIndex);
        model.removeRow(rowToModel);

        for (City city : cityDirectory.getCityDir()) {
            if (city.getCityName().equalsIgnoreCase(selectedCityName)) {
                city.getCompanyDirectory().deleteCompany(selectedRowIndex);
                populateCompanies(city.getCompanyDirectory().getCompanyDirectoryList());
                break;
            }
        }
        JOptionPane.showMessageDialog(this, "Community is deleted");
    }//GEN-LAST:event_deleteButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton3;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable5;
    private javax.swing.JButton updateButton2;
    private javax.swing.JButton viewButton1;
    // End of variables declaration//GEN-END:variables
}
