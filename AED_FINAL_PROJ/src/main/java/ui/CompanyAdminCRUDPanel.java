/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JSplitPane;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.CityDir;
import model.Community;
import model.Company;
import model.CompanyDirectory;
import model.CustomerDirectory;
import model.DeliveryBoyDirectory;
import model.UserAuthentication;
import model.UserAuthenticationDirectory;
import database.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author hrish
 */
public class CompanyAdminCRUDPanel extends javax.swing.JPanel {

    /**
     * Creates new form CompanyAdminCRUDPanel
     */
    
    private CityDir cityDirectory;
    private JSplitPane splitPane;
    private CustomerDirectory customerDirectory;
    private CompanyDirectory companyDirectory;
    private Community community;
    private UserAuthenticationDirectory userauthenticationdirectory;
    private DeliveryBoyDirectory deliveryBoyDirectory;
    private String cityName;
    private String companyName;
    
    public CompanyAdminCRUDPanel(String cityName, String companyName, CityDir cityDirectory, CompanyDirectory companyDirectory, UserAuthenticationDirectory userauthenticationdirectory, JSplitPane splitPane) {
        initComponents();
        
        this.cityDirectory = cityDirectory;
        this.splitPane = splitPane;
        this.companyDirectory = companyDirectory;
        this.userauthenticationdirectory = userauthenticationdirectory;
        this.cityName = cityName;
        this.companyName = companyName;
        
        populateCompanyTable();
    }
    
    private void populateCompanyAdmin() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        for (UserAuthentication userAuthentication : userauthenticationdirectory.getUserAuthenticationList()) {
            if ("CompanyAdmin".equalsIgnoreCase(userAuthentication.getUserType())
                    && cityName.equalsIgnoreCase(userAuthentication.getCityName())) {
                Object[] row = new Object[2];
                row[0] = userAuthentication.getUserName();
                System.out.println("Username: "+userAuthentication.getUserName());
                row[1] = userAuthentication.getCompanyName();
                model.addRow(row);
            }
        }
    }
    
    private void populateCompanyTable() {                                            
        // TODO add your handling code here:

        for (City city : cityDirectory.getCityDir()) {
            if (city.getCityName().equalsIgnoreCase(cityName)) {
                if (city.getCompanyDirectory() == null) {
                    List<Company> communityList = new ArrayList<>();
                    populateCompanies(communityList);
                } else {
                    populateCompanies(city.getCompanyDirectory().getCompanyDirectoryList());
                }
                break;
            }
        }
    }                                           

    /**
     * Populate the table rows from the arrayList.
     */
    private void populateCompanies(List<Company> companyList) {
        DefaultTableModel model = (DefaultTableModel) tblCompanies.getModel();
        model.setRowCount(0);
        for (Company company : companyList) {
            Object[] row = new Object[3];
            row[0] = company.getCompanyName();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCreateCompanyAdmin = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        passwordTextField = new javax.swing.JTextField();
        userNameTextField = new javax.swing.JTextField();
        deleteCompanyAdminButton = new javax.swing.JButton();
        updateCompanyAdmin = new javax.swing.JButton();
        viewCompanyAdmin = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCompanies = new javax.swing.JTable();

        btnCreateCompanyAdmin.setText("Save");
        btnCreateCompanyAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateCompanyAdminActionPerformed(evt);
            }
        });

        jLabel2.setText("Password");

        jLabel1.setText("Username");

        userNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNameTextFieldActionPerformed(evt);
            }
        });

        deleteCompanyAdminButton.setText("Delete");
        deleteCompanyAdminButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCompanyAdminButtonActionPerformed(evt);
            }
        });

        updateCompanyAdmin.setText("Update");
        updateCompanyAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCompanyAdminActionPerformed(evt);
            }
        });

        viewCompanyAdmin.setText("View");
        viewCompanyAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCompanyAdminActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Username", "Company Name"
            }
        ));
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(0).setHeaderValue("Username");
        }

        tblCompanies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Company Name"
            }
        ));
        jScrollPane2.setViewportView(tblCompanies);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(userNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(btnCreateCompanyAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 136, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(viewCompanyAdmin)
                        .addGap(45, 45, 45)
                        .addComponent(updateCompanyAdmin)
                        .addGap(41, 41, 41)
                        .addComponent(deleteCompanyAdminButton)))
                .addGap(196, 196, 196))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(userNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewCompanyAdmin)
                    .addComponent(updateCompanyAdmin)
                    .addComponent(deleteCompanyAdminButton)
                    .addComponent(btnCreateCompanyAdmin))
                .addContainerGap(105, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateCompanyAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateCompanyAdminActionPerformed
        // TODO add your handling code here:
        if (userNameTextField.getText().length() == 0) {
            JOptionPane.showMessageDialog(this, "Mandatory User name field is empty");
            return;
        }

        if (passwordTextField.getText().length() == 0) {
            JOptionPane.showMessageDialog(this, "Mandatory Password field is empty");
            return;
        }
        
        int selectedRowIndex = tblCompanies.getSelectedRow();

        if (selectedRowIndex < 0 ) {

            JOptionPane.showMessageDialog(this, "Please select a company.");
            return;
        }

        DefaultTableModel model;
        model = (DefaultTableModel) tblCompanies.getModel();
        String selectedCompanyName = (String) model.getValueAt(selectedRowIndex, 0);

        for (int i = 0; i < userauthenticationdirectory.getUserAuthenticationList().size(); i++) {
            UserAuthentication userauthentication = userauthenticationdirectory.getUserAuthenticationList().get(i);
            if ("CompanyAdmin".equalsIgnoreCase(userauthentication.getUserType())
                && cityName.equalsIgnoreCase(userauthentication.getCityName())
                && selectedCompanyName.equalsIgnoreCase(userauthentication.getCompanyName())
                && userauthentication.getUserName().equalsIgnoreCase(userNameTextField.getText())) {
                JOptionPane.showMessageDialog(this, "Company Admin username already exits in the same company, please login directly");
                return;
            }
        }

        UserAuthentication userAuthentication = userauthenticationdirectory.addNewUserAuthentication();
        userAuthentication.setUserName(userNameTextField.getText());
        userAuthentication.setPassword(passwordTextField.getText());
        userAuthentication.setCityName(cityName);
        userAuthentication.setCompanyName(selectedCompanyName);
        userAuthentication.setUserType("CompanyAdmin");
        
        Connection obj = new Connection();
        java.sql.Connection con = obj.getConnection();
        
        String query = "INSERT INTO `user_auth`(`userName`, `password`, `userType`, companyName, cityName) VALUES (?,?,?,?,?)";
        PreparedStatement pst = null;
        try {
            pst = obj.getConnection().prepareStatement(query);
            pst.setString(1, userNameTextField.getText());
            pst.setString(2, passwordTextField.getText());
            pst.setString(3, "CompanyAdmin");
            pst.setString(4, selectedCompanyName);
            pst.setString(5, cityName);
            //        if(cpass.equals(password)){
            pst.executeUpdate();
            System.out.println("Inserted user.");
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        JOptionPane.showMessageDialog(this, "Company Admin credentials is saved.");
    }//GEN-LAST:event_btnCreateCompanyAdminActionPerformed

    private void userNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userNameTextFieldActionPerformed

    private void deleteCompanyAdminButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCompanyAdminButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = jTable1.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int rowToModel = 0;
        rowToModel = jTable1.convertRowIndexToModel(selectedRowIndex);

        String selectedUsername = model.getValueAt(selectedRowIndex, 0).toString();
        model.removeRow(rowToModel);
        try {
            for (UserAuthentication userAuthentication : userauthenticationdirectory.getUserAuthenticationList()) {
                if (userAuthentication.getUserName().equalsIgnoreCase(selectedUsername)
                    && userAuthentication.getUserType().equalsIgnoreCase("CompanyAdmin")
                    && cityName.equalsIgnoreCase(userAuthentication.getCityName())
                    && companyName.equalsIgnoreCase(userAuthentication.getCompanyName())) {
                    userauthenticationdirectory.deleteUserAuthentication(userAuthentication);
                    populateCompanyAdmin();
                }
            }
        } catch (Exception exception) {

        }
        JOptionPane.showMessageDialog(this, "Company Admin is deleted");
    }//GEN-LAST:event_deleteCompanyAdminButtonActionPerformed

    private void updateCompanyAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCompanyAdminActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = jTable1.getSelectedRow();

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to update");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String selectUsername = (String) model.getValueAt(selectedRowIndex, 0);

        String newUserName = JOptionPane.showInputDialog(null, "Enter the new User name", selectUsername);

        model.setValueAt(newUserName, selectedRowIndex, 0);

        for (UserAuthentication userAuthentication : userauthenticationdirectory.getUserAuthenticationList()) {
            if (userAuthentication.getUserName().equalsIgnoreCase(selectUsername)
                && userAuthentication.getUserType().equalsIgnoreCase("CompanyAdmin")
                && cityName.equalsIgnoreCase(userAuthentication.getCityName())
                && companyName.equalsIgnoreCase(userAuthentication.getCompanyName())) {
                userAuthentication.setUserName(newUserName);
            }
        }
        JOptionPane.showMessageDialog(this, "Company Admin Record is Updated");
    }//GEN-LAST:event_updateCompanyAdminActionPerformed

    private void viewCompanyAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCompanyAdminActionPerformed
        // TODO add your handling code here:
        populateCompanyAdmin();
    }//GEN-LAST:event_viewCompanyAdminActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateCompanyAdmin;
    private javax.swing.JButton deleteCompanyAdminButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField passwordTextField;
    private javax.swing.JTable tblCompanies;
    private javax.swing.JButton updateCompanyAdmin;
    private javax.swing.JTextField userNameTextField;
    private javax.swing.JButton viewCompanyAdmin;
    // End of variables declaration//GEN-END:variables
}
