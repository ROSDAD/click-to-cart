/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JSplitPane;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.CityDir;
import model.Community;
import model.Company;
import model.CompanyDirectory;
import model.Customer;
import model.CustomerDirectory;
import model.DeliveryBoyDirectory;
import model.Orderedprod;
import model.Ordermgt;
import model.Orders;
import model.UserAuthenticationDirectory;

/**
 *
 * @author Abhishek
 */
public class CustomerOrderNowJPanel extends javax.swing.JPanel {

    private JSplitPane splitPane;
    private CustomerDirectory customerDirectory;
    private CompanyDirectory companyDirectory;
    private Community community;
    private UserAuthenticationDirectory userauthenticationdirectory;
    private DeliveryBoyDirectory deliveryBoyDirectory;
    private Ordermgt orderManagement;
    private String userName;
    private CityDir cityDirectory;

    /**
     * Creates new form MainCustomerJPanel
     */
    public CustomerOrderNowJPanel() {
        initComponents();
    }

    public CustomerOrderNowJPanel(CityDir cityDirectory, String userName, Ordermgt orderManagement, Community community, CustomerDirectory customerDirectory, CompanyDirectory companyDirectory, UserAuthenticationDirectory userauthenticationdirectory, JSplitPane splitPane, DeliveryBoyDirectory deliveryBoyDirectory) {
        initComponents();
        this.cityDirectory = cityDirectory;
        this.userName = userName;
        this.community = community;
        this.splitPane = splitPane;
        this.customerDirectory = customerDirectory;
        this.companyDirectory = companyDirectory;
        this.userauthenticationdirectory = userauthenticationdirectory;
        this.deliveryBoyDirectory = deliveryBoyDirectory;
        this.orderManagement = orderManagement;
        populateCities();
    }

    /**
     * Populate the table cities rows from the arrayList.
     */
    private void populateCities() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        for (City city : cityDirectory.getCityDir()) {
            Object[] row = new Object[1];
            row[0] = city.getCityName();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        orderNowjButton = new javax.swing.JButton();
        ViewCompany = new javax.swing.JButton();

        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "City Name"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTable2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Company Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        orderNowjButton.setText("Order Now");
        orderNowjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderNowjButtonActionPerformed(evt);
            }
        });

        ViewCompany.setText("View Company");
        ViewCompany.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewCompanyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(440, 440, 440)
                        .addComponent(orderNowjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(131, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(ViewCompany)
                .addGap(312, 312, 312))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(ViewCompany)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(orderNowjButton)
                .addGap(29, 29, 29))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void orderNowjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderNowjButtonActionPerformed
        // TODO add your handling code here:

        int selectedRowIndex = jTable1.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to select city");
            return;
        }

        DefaultTableModel modelCity = (DefaultTableModel) jTable1.getModel();
        String selectedCityName = modelCity.getValueAt(selectedRowIndex, 0).toString();

        //Selected City Table
        int selectedRowIndexCompany = jTable2.getSelectedRow();
        if (selectedRowIndexCompany < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to select company");
            return;
        }

        DefaultTableModel modelCompany = (DefaultTableModel) jTable2.getModel();
        String selectedCompany = modelCompany.getValueAt(selectedRowIndexCompany, 0).toString();

        Company companyObject = null;
        // For inserting the doctor to the doctor directory of the hospital.
        for (City city : cityDirectory.getCityDir()) {
            if (city.getCityName().equalsIgnoreCase(selectedCityName)) {
                for (Company company : city.getCompanyDirectory().getCompanyDirectoryList()) {
                    if (company.getCompanyName().equalsIgnoreCase(selectedCompany)) {
                        companyObject = company;
                    }
                }
            }
        }

        Customer customerObject = null;
        for (Customer customer : customerDirectory.getCustomerList()) {
            if (customer.getUserName().equalsIgnoreCase(userName)) {
                System.out.println(customer.getUserName() + " " + userName);
                System.out.println(customerObject + " " + customer);
                customerObject = customer;
            }
        }
        System.out.println(customerObject);
        ItemListPanel itemListPanel = new ItemListPanel(customerObject, companyObject, splitPane);

        splitPane.setRightComponent(itemListPanel);


    }//GEN-LAST:event_orderNowjButtonActionPerformed

    private void ViewCompanyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewCompanyActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = jTable1.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to select city");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String city = model.getValueAt(selectedRowIndex, 0).toString();
        List<City> cityList1 = cityDirectory.getCityDir();
        for (int i = 0; i < cityList1.size(); i++) {
            if (city.equalsIgnoreCase(cityList1.get(i).getCityName())) {
                if (cityList1.get(i).getCompanyDirectory() == null) {
                    List<Company> companyList = new ArrayList<>();
                    populateCompanies(companyList);
                } else {
                    List<Company> companyList = cityList1.get(i).getCompanyDirectory().getCompanyDirectoryList();
                    populateCompanies(companyList);
                }
            }
        }
    }//GEN-LAST:event_ViewCompanyActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ViewCompany;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JButton orderNowjButton;
    // End of variables declaration//GEN-END:variables

    private void populateCompanies(List<Company> companyList) {
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        for (Company company : companyList) {
            Object[] row = new Object[1];
            row[0] = company.getCompanyName();
            model.addRow(row);
        }
    }
}
