/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import model.UserAuthenticationDirectory;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JSplitPane;
import javax.swing.table.DefaultTableModel;
import model.Community;
import model.CompanyDirectory;
import model.CustomerDirectory;
import model.DeliveryBoy;
import model.DeliveryBoyDirectory;
import model.Orders;

/**
 *
 * @author Abhishek
 */
public class MainDeliveryBoyJPanel extends javax.swing.JPanel {

    private JSplitPane splitPane;
    private CustomerDirectory customerDirectory;
    private CompanyDirectory companyDirectory;
    private Community community;
    private UserAuthenticationDirectory userauthenticationdirectory;
    private DeliveryBoyDirectory deliveryBoyDirectory;
    private String deliveryBoyUserName;

    /**
     * Creates new form MainCustomerJPanel
     */
    public MainDeliveryBoyJPanel() {
        initComponents();
    }

    public MainDeliveryBoyJPanel(Community community, String deliveryBoyUserName, CustomerDirectory customerDirectory, CompanyDirectory companyDirectory, UserAuthenticationDirectory userauthenticationdirectory, JSplitPane splitPane, DeliveryBoyDirectory deliveryBoyDirectory) {
        initComponents();
        this.community = community;
        this.deliveryBoyUserName = deliveryBoyUserName;
        this.splitPane = splitPane;
        this.customerDirectory = customerDirectory;
        this.companyDirectory = companyDirectory;
        this.userauthenticationdirectory = userauthenticationdirectory;
        this.deliveryBoyDirectory = deliveryBoyDirectory;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ordersDeliveredButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        ordersOutForDeliveryButton = new javax.swing.JButton();
        updateOrderStatusButton = new javax.swing.JButton();
        createLabel1 = new javax.swing.JLabel();

        ordersDeliveredButton.setText("View Orders delivered");
        ordersDeliveredButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordersDeliveredButtonActionPerformed(evt);
            }
        });

        jTable2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Order ID", "Final Price", "Address", "Payment Type", "Order Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jTable4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Order ID", "Final Price", "Address", "Payment Type", "Order Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTable4);

        ordersOutForDeliveryButton.setText("View Orders out for delivery");
        ordersOutForDeliveryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordersOutForDeliveryButtonActionPerformed(evt);
            }
        });

        updateOrderStatusButton.setText("Update Order Status To Delivered");
        updateOrderStatusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateOrderStatusButtonActionPerformed(evt);
            }
        });

        createLabel1.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        createLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        createLabel1.setText("Delivery Boy Main Panel");
        createLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(createLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 203, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(ordersOutForDeliveryButton)
                        .addGap(46, 46, 46)
                        .addComponent(updateOrderStatusButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ordersDeliveredButton, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(335, 335, 335))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createLabel1)
                .addGap(84, 84, 84)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ordersOutForDeliveryButton)
                    .addComponent(ordersDeliveredButton)
                    .addComponent(updateOrderStatusButton))
                .addContainerGap(209, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ordersDeliveredButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordersDeliveredButtonActionPerformed
        // TODO add your handling code here:
        for (DeliveryBoy deliveryBoy : deliveryBoyDirectory.getDeliveryBoyList()) {
            if (deliveryBoy.getDeliveryBoyName().equalsIgnoreCase(deliveryBoyUserName)) {
                if (deliveryBoy.getOrderList() == null || deliveryBoy.getOrderList().size() == 0) {
                    List<Orders> orderList = new ArrayList<>();
                    populateDeliveredOrders(orderList);
                } else {
                    populateDeliveredOrders(deliveryBoy.getOrderList());
                }
            }
        }
    }//GEN-LAST:event_ordersDeliveredButtonActionPerformed

    private void ordersOutForDeliveryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordersOutForDeliveryButtonActionPerformed
        // TODO add your handling code here:

        for (DeliveryBoy deliveryBoy : deliveryBoyDirectory.getDeliveryBoyList()) {
            if (deliveryBoy.getDeliveryBoyName().equalsIgnoreCase(deliveryBoyUserName)) {
                if (deliveryBoy.getOrderList() == null || deliveryBoy.getOrderList().size() == 0) {
                    List<Orders> orderList = new ArrayList<>();
                    populateOutForDeliveryOrders(orderList);
                } else {
                    populateOutForDeliveryOrders(deliveryBoy.getOrderList());
                }
            }
        }
    }//GEN-LAST:event_ordersOutForDeliveryButtonActionPerformed

    private void updateOrderStatusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateOrderStatusButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndexOrderStatus = jTable2.getSelectedRow();
        if (selectedRowIndexOrderStatus < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to select order");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        String selectedOrderID = model.getValueAt(selectedRowIndexOrderStatus, 0).toString();
        model.setValueAt("Delivered", selectedRowIndexOrderStatus, 4);

        for (DeliveryBoy deliveryBoy : deliveryBoyDirectory.getDeliveryBoyList()) {
            if (deliveryBoy.getDeliveryBoyName().equalsIgnoreCase(deliveryBoyUserName)) {
                for (Orders orders : deliveryBoy.getOrderList()) {
                    if (selectedOrderID.equalsIgnoreCase(orders.getOrderId())) {
                        orders.setOrderStatus("Delivered");
                        break;
                    }
                }
            }
            populateOutForDeliveryOrders(deliveryBoy.getOrderList());
            populateDeliveredOrders(deliveryBoy.getOrderList());
            break;
        }

        JOptionPane.showMessageDialog(this, "Order Status is Updated");
    }//GEN-LAST:event_updateOrderStatusButtonActionPerformed

    private void populateOutForDeliveryOrders(List<Orders> ordersList) {
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        for (Orders orders : ordersList) {
            if (orders.getOrderStatus().equalsIgnoreCase("OutForDelivery")) {
                Object[] row = new Object[5];
                row[0] = orders.getOrderId();
                row[1] = orders.getFinalPrice();
                row[2] = orders.getAddress();
                row[3] = orders.getPaymentType().getPaymentType();
                row[4] = orders.getOrderStatus();
                model.addRow(row);
            }
        }
    }

    private void populateDeliveredOrders(List<Orders> ordersList) {
        DefaultTableModel model = (DefaultTableModel) jTable4.getModel();
        model.setRowCount(0);
        for (Orders orders : ordersList) {
            if (orders.getOrderStatus().equalsIgnoreCase("Delivered")) {
                Object[] row = new Object[5];
                row[0] = orders.getOrderId();
                row[1] = orders.getFinalPrice();
                row[2] = orders.getAddress();
                row[3] = orders.getPaymentType().getPaymentType();
                row[4] = orders.getOrderStatus();
                model.addRow(row);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel createLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable4;
    private javax.swing.JButton ordersDeliveredButton;
    private javax.swing.JButton ordersOutForDeliveryButton;
    private javax.swing.JButton updateOrderStatusButton;
    // End of variables declaration//GEN-END:variables
}
